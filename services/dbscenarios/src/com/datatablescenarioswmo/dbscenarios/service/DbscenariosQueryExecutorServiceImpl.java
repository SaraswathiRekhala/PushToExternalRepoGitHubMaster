/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.datatablescenarioswmo.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.datatablescenarioswmo.dbscenarios.AllTypes;
import com.datatablescenarioswmo.dbscenarios.models.query.*;

@Service
public class DbscenariosQueryExecutorServiceImpl implements DbscenariosQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DbscenariosQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("dbscenariosWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "dbscenariosTransactionManager", readOnly = true)
    @Override
    public Page<SvUserLoginDataResponse> executeSV_UserLoginData(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("SV_UserLoginData", params, SvUserLoginDataResponse.class, pageable);
    }

    @Transactional(value = "dbscenariosTransactionManager", readOnly = true)
    @Override
    public InputStream getProfileContentForSV_UserLoginData(Short userId) throws EntityNotFoundException {
        Map<String, Object> params = new HashMap<>(0);

        params.put("userId", userId);

        SvUserLoginDataResponse _result =  queryExecutor.executeNamedQuery("SV_UserLoginData__identifier", params, SvUserLoginDataResponse.class);
        if(_result.getProfile() == null) {
            LOGGER.debug("Blob content not exists for profile in query SV_UserLoginData");
            throw new BlobContentNotFoundException("Blob content not found for profile in query SV_UserLoginData");
        }
        return new ByteArrayInputStream(_result.getProfile());
    }

    @Transactional(value = "dbscenariosTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_UserLoginData(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("SV_UserLoginData", params, SvUserLoginDataResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
    public Integer executeSV_UpdateListOfRecords(SvUpdateListOfRecordsRequest svUpdateListOfRecordsRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("UROLE", svUpdateListOfRecordsRequest.getUrole());
        params.put("USERID", svUpdateListOfRecordsRequest.getUserid());

        return queryExecutor.executeNamedQueryForUpdate("SV_UpdateListOfRecords", params);
    }

    @Transactional(value = "dbscenariosTransactionManager", readOnly = true)
    @Override
    public Page<SvAllTypesResponse> executeSv_AllTypes(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("Sv_AllTypes", params, SvAllTypesResponse.class, pageable);
    }

    @Transactional(value = "dbscenariosTransactionManager", readOnly = true)
    @Override
    public InputStream getBlobColContentForSv_AllTypes(Integer pkId) throws EntityNotFoundException {
        Map<String, Object> params = new HashMap<>(0);

        params.put("pkId", pkId);

        SvAllTypesResponse _result =  queryExecutor.executeNamedQuery("Sv_AllTypes__identifier", params, SvAllTypesResponse.class);
        if(_result.getBlobCol() == null) {
            LOGGER.debug("Blob content not exists for blobCol in query Sv_AllTypes");
            throw new BlobContentNotFoundException("Blob content not found for blobCol in query Sv_AllTypes");
        }
        return new ByteArrayInputStream(_result.getBlobCol());
    }

    @Transactional(value = "dbscenariosTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSv_AllTypes(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("Sv_AllTypes", params, SvAllTypesResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "dbscenariosTransactionManager", readOnly = true)
    @Override
    public Page<AllTypes> executeHQL_AllTypesWithId(Integer pkid, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("PKID", pkid);

        return queryExecutor.executeNamedQuery("HQL_AllTypesWithId", params, AllTypes.class, pageable);
    }

    @Transactional(value = "dbscenariosTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportHQL_AllTypesWithId(Integer pkid, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("PKID", pkid);

        QueryProcedureInput queryInput = new QueryProcedureInput("HQL_AllTypesWithId", params, AllTypes.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "dbscenariosTransactionManager", readOnly = true)
    @Override
    public Page<SvAllTypesDataResponse> executeSV_AllTypesData(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("SV_AllTypesData", params, SvAllTypesDataResponse.class, pageable);
    }

    @Transactional(value = "dbscenariosTransactionManager", readOnly = true)
    @Override
    public InputStream getBlobColContentForSV_AllTypesData(Integer pkId) throws EntityNotFoundException {
        Map<String, Object> params = new HashMap<>(0);

        params.put("pkId", pkId);

        SvAllTypesDataResponse _result =  queryExecutor.executeNamedQuery("SV_AllTypesData__identifier", params, SvAllTypesDataResponse.class);
        if(_result.getBlobCol() == null) {
            LOGGER.debug("Blob content not exists for blobCol in query SV_AllTypesData");
            throw new BlobContentNotFoundException("Blob content not found for blobCol in query SV_AllTypesData");
        }
        return new ByteArrayInputStream(_result.getBlobCol());
    }

    @Transactional(value = "dbscenariosTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSV_AllTypesData(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("SV_AllTypesData", params, SvAllTypesDataResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}